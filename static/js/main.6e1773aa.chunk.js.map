{"version":3,"sources":["Components/ListItem.js","Components/List.js","Components/Form.js","actions.js","constants.js","Components/Signin/Signin.js","Components/Register/Register.js","Components/Navigation/Navigation.js","Containers/App.js","serviceWorker.js","reducers.js","index.js"],"names":["ListItem","handleRemoveTodo","_this","props","isSignedIn","onRemoveTodo","userEmail","todo","index","react_default","a","createElement","style","backgroundColor","concat","this","color","className","onClick","Component","List","_ref","todos","map","item","i","src_Components_ListItem","key","Form","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","handleAddTodo","event","state","inputVal","onAddTodo","target","value","handleSubmit","preventDefault","setState","onInputChange","isGreen","onSubmit","autoComplete","type","placeholder","id","onChange","apiRequest","route","body","pending","success","failed","dispatch","fetch","method","headers","Content-Type","JSON","stringify","then","response","json","data","payload","catch","error","accountRoute","Signin","onEmailChange","signInEmail","onPasswordChange","signInPassword","handleOnSubmit","getTodos","htmlFor","name","isPending","length","connect","account","email","password","signIn","registerEmail","onPasswordRepeatChange","repeatPassword","passwordsMatching","register","Navigation","handleSignOut","handleAccountForm","wipeTodos","App","handleRequestTodos","handleRequestDoneTodos","isAllDone","userTodos","userDoneTodos","noUserTodos","noUserDoneTodos","showSigninForm","showRegisterForm","Components_Navigation_Navigation","src_Components_Form","handleAddTodoWithUser","Components_List","handleRemoveTodoWithUser","handleRemoveDoneTodoWithUser","Components_Signin_Signin","Register","handleRemoveDoneTodo","updateTodosWithoutUser","doneTodos","updateTodos","removeTodo","removeDoneTodo","input","requestTodos","requestDoneTodos","addTodo","removeTodoWithUser","removeDoneTodoWithUser","handleAccountRoute","Boolean","window","location","hostname","match","initialState","initialStateWithUser","initialStateAccount","initialStateAccountRoute","logger","createLogger","rootReducer","combineReducers","arguments","undefined","action","assign","toConsumableArray","array","newDoneItem","splice","doneArray","doneTodo","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","es","src_Containers_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.6e1773aa.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './ListItem.css';\n\nclass ListItem extends Component {\n  handleRemoveTodo = () => {\n    this.props.isSignedIn ?\n    this.props.onRemoveTodo(this.props.userEmail, this.props.todo)\n    :\n    this.props.onRemoveTodo(this.props.index)\n  }\n  render() {\n    return (\n      <div>\n        <h3 style={{backgroundColor: `#${this.props.color}`}} className='listItem' onClick={this.handleRemoveTodo}>{this.props.todo}</h3>\n      </div>\n    );\n  }\n}\n\nexport default ListItem;\n","import React from 'react';\nimport ListItem from './ListItem';\n\nconst List = ({ todos, onRemoveTodo, color, userEmail, isSignedIn }) => {\n  return (\n    <div>\n      {\n        todos.map((item, i) => {\n          return (\n              <ListItem\n              todo={item}\n              key={i}\n              index={i}\n              onRemoveTodo={onRemoveTodo}\n              color={color}\n              userEmail={userEmail}\n              isSignedIn={isSignedIn}\n            />\n          )\n        })\n      }\n    </div>\n  );\n}\n\nexport default List;\n","import React, { Component } from 'react';\nimport './Form.css';\n\nclass Form extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      inputVal: ''\n    }\n  }\n  handleAddTodo = (event) => {\n    if (this.state.inputVal !== ''){\n      this.props.isSignedIn ?\n      this.props.onAddTodo(this.props.userEmail, event.target[0].value)\n      :\n      this.props.onAddTodo(event.target[0].value);\n    }\n  }\n  handleSubmit = (event) => {\n    event.preventDefault();\n    this.handleAddTodo(event);\n    this.setState({\n      inputVal: ''\n    })\n  }\n  onInputChange = (event) => {\n    this.setState({\n      inputVal: event.target.value\n    })\n  }\n  isGreen = () => {\n    return this.props.isGreen ? 'isGreen' : 'isBlue';\n  }\n  render() {\n    return (\n      <form onSubmit={this.handleSubmit} autoComplete='off' >\n        <input type='text' placeholder='Add Todo' id='textField' value={this.state.inputVal} onChange={this.onInputChange} style={{color: `#${this.props.color}`}} />\n        <button type='submit' id={this.isGreen()}>Add</button>\n      </form>\n    );\n  }\n}\n\nexport default Form;\n","import {\n  ADD_TODO, REMOVE_TODO,\n  REMOVE_DONE_TODO,\n  REQUEST_TODOS_PENDING,\n  REQUEST_TODOS_SUCCESS,\n  REQUEST_TODOS_FAILED,\n  REQUEST_DONE_TODOS_PENDING,\n  REQUEST_DONE_TODOS_SUCCESS,\n  REQUEST_DONE_TODOS_FAILED,\n  WIPE_TODOS,\n  ADD_TODO_PENDING,\n  ADD_TODO_SUCCESS,\n  ADD_TODO_FAILED,\n  REMOVE_TODO_PENDING,\n  REMOVE_TODO_SUCCESS,\n  REMOVE_TODO_FAILED,\n  REMOVE_DONE_TODO_PENDING,\n  REMOVE_DONE_TODO_SUCCESS,\n  REMOVE_DONE_TODO_FAILED,\n  SIGN_IN_PENDING,\n  SIGN_IN_SUCCESS,\n  SIGN_IN_FAILED,\n  REGISTER_PENDING,\n  REGISTER_SUCCESS,\n  REGISTER_FAILED,\n  SIGN_OUT,\n  CHANGE_ACCOUNT_ROUTE\n} from './constants';\n\nconst apiRequest = (route, body, pending, success, failed, dispatch) => {\n  dispatch({ type: pending });\n  fetch(`https://sleepy-shore-42232.herokuapp.com/${route}`, {\n    method: 'post',\n    headers: {'Content-Type': 'application/json'},\n    body: JSON.stringify(body)\n  })\n    .then(response => response.json())\n    .then(data => {\n      if (data.success) {\n        dispatch({ type: success, payload: data })\n      } else {\n        dispatch({type: failed, payload: data})\n      }\n    })\n    .catch(error => dispatch({type: failed, payload: error}))\n}\n\nexport const setTodos = (text) => ({\n  type: ADD_TODO,\n  payload: text\n})\n\nexport const removeTodo = (index) => ({\n  type: REMOVE_TODO,\n  payload: index\n})\n\nexport const removeDoneTodo = (index) => ({\n  type: REMOVE_DONE_TODO,\n  payload: index\n})\n\nexport const requestTodos = (email) => (dispatch) => {\n  const body = {\n    input: email\n  }\n  apiRequest(\n    'requesttodos',\n    body,\n    REQUEST_TODOS_PENDING,\n    REQUEST_TODOS_SUCCESS,\n    REQUEST_TODOS_FAILED,\n    dispatch\n  )\n}\n\nexport const requestDoneTodos = (email) => (dispatch) => {\n  const body = {\n    input: email\n  }\n  apiRequest(\n    'requestdonetodos',\n    body,\n    REQUEST_DONE_TODOS_PENDING,\n    REQUEST_DONE_TODOS_SUCCESS,\n    REQUEST_DONE_TODOS_FAILED,\n    dispatch\n  )\n}\n\nexport const addTodo = (email, todo) => (dispatch) => {\n  const body = {\n    email: email,\n    todo: todo\n  }\n  apiRequest(\n    'addtodo',\n    body,\n    ADD_TODO_PENDING,\n    ADD_TODO_SUCCESS,\n    ADD_TODO_FAILED,\n    dispatch\n  )\n}\n\nexport const removeTodoWithUser = (email, todo) => (dispatch) => {\n  const body = {\n    email: email,\n    todo: todo\n  }\n  apiRequest(\n    'removetodo',\n    body,\n    REMOVE_TODO_PENDING,\n    REMOVE_TODO_SUCCESS,\n    REMOVE_TODO_FAILED,\n    dispatch\n  )\n}\n\nexport const removeDoneTodoWithUser = (email, todo) => (dispatch) => {\n  const body = {\n    email: email,\n    todo: todo\n  }\n  apiRequest(\n    'removedonetodo',\n    body,\n    REMOVE_DONE_TODO_PENDING,\n    REMOVE_DONE_TODO_SUCCESS,\n    REMOVE_DONE_TODO_FAILED,\n    dispatch\n  )\n}\n\nexport const signIn = (email, password) => (dispatch) => {\n  const body = {\n    email: email,\n    password: password\n  }\n  apiRequest(\n    'signin',\n    body,\n    SIGN_IN_PENDING,\n    SIGN_IN_SUCCESS,\n    SIGN_IN_FAILED,\n    dispatch\n  )\n}\n\nexport const register = (email, password) => (dispatch) => {\n  const body = {\n    email: email,\n    password: password\n  }\n  apiRequest(\n    'register',\n    body,\n    REGISTER_PENDING,\n    REGISTER_SUCCESS,\n    REGISTER_FAILED,\n    dispatch\n  )\n}\n\nexport const wipeTodos = () => ({\n  type: WIPE_TODOS\n})\n\nexport const signOut = () => ({\n  type: SIGN_OUT\n})\n\nexport const accountRoute = route => ({\n  type: CHANGE_ACCOUNT_ROUTE,\n  payload: route\n})\n","// No User\nexport const ADD_TODO = 'ADD_TODO';\nexport const REMOVE_TODO = 'REMOVE_TODO';\nexport const REMOVE_DONE_TODO = 'REMOVE_DONE_TODO';\n\n// Request Todos When logged in\nexport const REQUEST_TODOS_PENDING = 'REQUEST_TODOS_PENDING';\nexport const REQUEST_TODOS_SUCCESS = 'REQUEST_TODOS_SUCCESS';\nexport const REQUEST_TODOS_FAILED = 'REQUEST_TODOS_FAILED';\n\n// Request Todos When logged in\nexport const REQUEST_DONE_TODOS_PENDING = 'REQUEST_DONE_TODOS_PENDING';\nexport const REQUEST_DONE_TODOS_SUCCESS = 'REQUEST_DONE_TODOS_SUCCESS';\nexport const REQUEST_DONE_TODOS_FAILED = 'REQUEST_DONE_TODOS_FAILED';\n\n// Wipe the todos\nexport const WIPE_TODOS = 'WIPE_TODOS'; \n\n// Add a todo when logged in\nexport const ADD_TODO_PENDING = 'ADD_TODO_PENDING';\nexport const ADD_TODO_SUCCESS = 'ADD_TODO_SUCCESS';\nexport const ADD_TODO_FAILED = 'ADD_TODO_FAILED';\n\n// Remove todo and add to done todos when logged in\nexport const REMOVE_TODO_PENDING = 'REMOVE_TODO_PENDING';\nexport const REMOVE_TODO_SUCCESS = 'REMOVE_TODO_SUCCESS';\nexport const REMOVE_TODO_FAILED = 'REMOVE_TODO_FAILED';\n\n// Remove todo from done todos\nexport const REMOVE_DONE_TODO_PENDING = 'REMOVE_DONE_TODO_PENDING';\nexport const REMOVE_DONE_TODO_SUCCESS = 'REMOVE_DONE_TODO_SUCCESS';\nexport const REMOVE_DONE_TODO_FAILED = 'REMOVE_DONE_TODO_FAILED';\n\n// Sign in\nexport const SIGN_IN_PENDING = 'SIGN_IN_PENDING';\nexport const SIGN_IN_SUCCESS = 'SIGN_IN_SUCCESS';\nexport const SIGN_IN_FAILED = 'SIGN_IN_FAILED';\n\n// Regiser\nexport const REGISTER_PENDING = 'REGISTER_PENDING';\nexport const REGISTER_SUCCESS = 'REGISTER_SUCCESS';\nexport const REGISTER_FAILED = 'REGISTER_FAILED';\n\n// Sign Out\nexport const SIGN_OUT = 'SIGN_OUT';\n\n// Sign in Register form routes\nexport const CHANGE_ACCOUNT_ROUTE = 'CHANGE_ACCOUNT_ROUTE';\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport '../AccountForm.css';\n\nimport { signIn } from '../../actions';\n\nconst mapStateToProps = state => {\n  return {\n    isPending: state.account.isPending,\n    error: state.account.error,\n    email: state.account.email\n  }\n}\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    handleOnSubmit: (email, password) => dispatch(signIn(email, password))\n  }\n}\n\nclass Signin extends Component {\n  constructor() {\n    super();\n    this.state = {\n      signInEmail: '',\n      signInPassword: ''\n    }\n  }\n  onEmailChange = (event) => {\n    this.setState({signInEmail: event.target.value})\n  }\n\n  onPasswordChange = (event) => {\n    this.setState({signInPassword: event.target.value})\n  }\n\n  handleSubmit = (event) => {\n    event.preventDefault();\n    this.props.handleOnSubmit(this.state.signInEmail, this.state.signInPassword)\n    this.props.getTodos();\n  }\n  render() {\n    return(\n      <div className='accountForm'>\n        <h3>Sign In</h3>\n        <form onSubmit={this.handleSubmit} autoComplete='off'>\n          <label htmlFor=\"email-address\">e-mail</label>\n          <input\n            onChange={this.onEmailChange}\n            type=\"email\"\n            name=\"email-address\"\n            placeholder='johndoe@gmail.com'\n          />\n          <label htmlFor=\"password\">password</label>\n          <input\n            onChange={this.onPasswordChange}\n            type=\"password\"\n            name=\"password\"\n            id=\"password\"\n            placeholder='Secret1234'\n          />\n          <input\n            type=\"submit\"\n            value={this.props.isPending ? 'Loading...' : 'Sign In'}\n            className='accountButton'\n          />\n        </form>\n        {\n          this.props.error.length > 0\n          &&\n          <p>{this.props.error}</p>\n        }\n      </div>\n    )\n  }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Signin);\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport '../AccountForm.css';\n\nimport { register } from '../../actions';\n\nconst mapStateToProps = state => {\n  return {\n    isPending: state.account.isPending,\n    error: state.account.error,\n    email: state.account.email\n  }\n}\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    handleOnSubmit: (email, password) => dispatch(register(email, password))\n  }\n}\n\nclass Signin extends Component {\n  constructor() {\n    super();\n    this.state = {\n      registerEmail: '',\n      password: '',\n      repeatPassword: '',\n      passwordsMatching: true\n    }\n  }\n  onEmailChange = (event) => {\n    this.setState({registerEmail: event.target.value})\n  }\n\n  onPasswordChange = (event) => {\n    this.setState({password: event.target.value})\n  }\n\n  onPasswordRepeatChange = (event) => {\n    this.setState({repeatPassword: event.target.value})\n  }\n\n  handleSubmit = (event) => {\n    event.preventDefault();\n    if (this.state.password !== this.state.repeatPassword) {\n      this.setState({ passwordsMatching: false })\n      return;\n    }\n    this.props.handleOnSubmit(this.state.registerEmail, this.state.password)\n    this.props.getTodos(); \n  }\n  render() {\n    return(\n      <div className='accountForm'>\n        <h3>Register</h3>\n        <form onSubmit={this.handleSubmit} autoComplete='off'>\n          <label htmlFor=\"email-address\">e-mail</label>\n          <input\n            onChange={this.onEmailChange}\n            type=\"email\"\n            name=\"email-address\"\n            placeholder='johndoe@gmail.com'\n          />\n          <label htmlFor=\"password\">password</label>\n          <input\n            onChange={this.onPasswordChange}\n            type=\"password\"\n            name=\"password\"\n            placeholder='Secret1234'\n          />\n          <label htmlFor=\"repeat password\">repeat password</label>\n          <input\n            onChange={this.onPasswordRepeatChange}\n            type=\"password\"\n            name=\"repeatpassword\"\n            placeholder='Secret1234'\n          />\n          <input\n            type=\"submit\"\n            value={this.props.isPending ? 'Loading...' : this.state.passwordsMatching ? 'Register' : \"Passwords Don't Match\"}\n            className='accountButton'\n          />\n        </form>\n      </div>\n    )\n  }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Signin);\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport './Navigation.css';\n\nimport { accountRoute, signOut, wipeTodos } from '../../actions';\n\nconst mapStateToProps = state => {\n  return {\n    isSignedIn: state.account.isSignedIn,\n    accountRoute: state.accountRoute.route,\n    email: state.account.email\n  }\n}\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    handleAccountForm: route => {dispatch(accountRoute(route))},\n    handleSignOut: () => {dispatch(signOut())},\n    wipeTodos: () => {dispatch(wipeTodos())}\n  }\n}\n\nclass Navigation extends Component {\n  render() {\n    if (this.props.isSignedIn) {\n      return (\n        <nav>\n          <p>Signed In As: {this.props.email}</p>\n          <p onClick={() => {\n            this.props.handleSignOut()\n            this.props.handleAccountForm('')\n            this.props.wipeTodos()\n          }}>Sign Out</p>\n        </nav>\n      )\n    } else {\n      if (this.props.accountRoute !== '') {\n        return (\n          <nav>\n            <p onClick={() => this.props.handleAccountForm('')}>Click Here To Close</p>\n          </nav>\n        )\n      } else {\n        return (\n          <nav>\n            <p onClick={() => this.props.handleAccountForm('signin')}>Sign In</p>\n            <p onClick={() => this.props.handleAccountForm('register')}>Register</p>\n          </nav>\n        )\n      }\n    }\n  }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Navigation);\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport './App.css';\nimport List from '../Components/List';\nimport Form from '../Components/Form';\nimport Signin from '../Components/Signin/Signin';\nimport Register from '../Components/Register/Register';\nimport Navigation from '../Components/Navigation/Navigation';\n\nimport {\n  setTodos,\n  removeTodo,\n  removeDoneTodo,\n  requestTodos,\n  requestDoneTodos,\n  addTodo,\n  removeTodoWithUser,\n  removeDoneTodoWithUser,\n  accountRoute\n} from '../actions';\n\nconst mapStateToProps = state => {\n  return {\n    noUserTodos: state.updateTodosWithoutUser.todos,\n    noUserDoneTodos: state.updateTodosWithoutUser.doneTodos,\n    userTodos: state.updateTodos.todos,\n    userDoneTodos: state.updateTodos.doneTodos,\n    isPending: state.updateTodos.isPending,\n    error: state.updateTodos.error,\n    isSignedIn: state.account.isSignedIn,\n    accountRoute: state.accountRoute.route,\n    email: state.account.email\n  }\n}\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    handleAddTodo: todo => {\n      if(todo.length === 0) {\n        return;\n      }\n      dispatch(setTodos([todo]));\n    },\n    handleRemoveTodo: index => {dispatch(removeTodo(index))},\n    handleRemoveDoneTodo: index => {dispatch(removeDoneTodo(index))},\n    handleRequestTodos: email => dispatch(requestTodos(email)),\n    handleRequestDoneTodos: email => dispatch(requestDoneTodos(email)),\n    handleAddTodoWithUser: (email, todo) => dispatch(addTodo(email, todo)),\n    handleRemoveTodoWithUser: (email, todo) => dispatch(removeTodoWithUser(email, todo)),\n    handleRemoveDoneTodoWithUser: (email, todo) => dispatch(removeDoneTodoWithUser(email, todo)),\n    handleAccountRoute: route => {dispatch(accountRoute(route))}\n  }\n}\n\nclass App extends Component {\n  // make a request to the api to get the todos and done todos from the db\n  getTodos = () => {\n    if (this.props.isSignedIn) {\n      this.props.handleRequestTodos(this.props.email);\n      this.props.handleRequestDoneTodos(this.props.email);\n    }\n  }\n  // Check if there are only done todos left\n  isAllDone = () => {\n    if (this.props.isSignedIn) {\n      return this.props.userTodos.length === 0 && this.props.userDoneTodos.length > 0 ? true : false;\n    } else {\n      return this.props.noUserTodos.length === 0 && this.props.noUserDoneTodos.length > 0 ? true : false;\n    }\n  }\n  // Change the color from blue to green when you're done with all your todos\n  color = () => {\n    return this.isAllDone() ? '55e888' : '38b3be'\n  }\n  // if you press sign in this activates the sign in form\n  showSigninForm = () => {\n    if (this.props.accountRoute === 'signin' && !this.props.isSignedIn) {\n      return true;\n    }\n    return false;\n  }\n  // if you press register this activates register form\n  showRegisterForm = () => {\n    if (this.props.accountRoute === 'register' && !this.props.isSignedIn) {\n      return true;\n    }\n    return false;\n  }\n  render() {\n    // check if there is a user that is signed in. If there is, then return\n    // this with all the async functions that contact the api. Otherwise return\n    // the other one** where the sync functions are passed to make it usable\n    // even if you're not logged in.\n    if (this.props.isSignedIn) {\n      return(\n        <div style={{color:`#${this.color()}`}} className='App' >\n          <Navigation />\n          <div className='menu'>\n            <div className='todoForm'>\n              <h1>Simply Todos</h1>\n              <Form\n                onAddTodo={this.props.handleAddTodoWithUser}\n                userEmail={this.props.email}\n                color={this.color()}\n                isSignedIn={true}\n                isGreen={this.isAllDone()}\n              />\n            </div>\n          </div>\n          {\n            this.props.userTodos.length === 0 && this.props.userDoneTodos.length === 0\n            &&\n            <h2 onClick={this.getTodos} className='loadTodos' >Load Todos</h2>\n          }\n          <List\n            todos={this.props.userTodos}\n            onRemoveTodo={this.props.handleRemoveTodoWithUser}\n            userEmail={this.props.email}\n            isSignedIn={true}\n            color={'38b3be'}\n          />\n          {\n            // check if there are any done todos, if there is then return\n            // a new list with the done todos\n            this.props.userDoneTodos.length !== 0\n            &&\n            <div>\n              <h2>Done Todos</h2>\n              <List\n                todos={this.props.userDoneTodos}\n                onRemoveTodo={this.props.handleRemoveDoneTodoWithUser}\n                userEmail={this.props.email}\n                isSignedIn={true}\n                color={'55e888'}\n              />\n            </div>\n          }\n        </div>\n      );\n    } else {\n      // **this is the other one...\n      return(\n        <div style={{color:`#${this.color()}`}} className='App' >\n          <Navigation />\n          <div className='menu'>\n            <div className='todoForm'>\n              <h1>Simply Todos</h1>\n              <Form\n                onAddTodo={this.props.handleAddTodo}\n                isSignedIn={false}\n                userEmail=''\n                color={this.color()}\n                isGreen={this.isAllDone()}\n              />\n            </div>\n            {\n              // checking if the sign in form should be shown\n              this.showSigninForm()\n              &&\n              <Signin getTodos={this.getTodos} />\n            }\n            {\n              // checking if the register form should be shown\n              this.showRegisterForm()\n              &&\n              <Register getTodos={this.getTodos} />\n            }\n          </div>\n          <List\n            todos={this.props.noUserTodos}\n            onRemoveTodo={this.props.handleRemoveTodo}\n            isSignedIn={false}\n            userEmail=''\n            color={'38b3be'}\n          />\n          {\n            // check if there are any done todos, if there is then return\n            // a new list with the done todos\n            this.props.noUserDoneTodos.length !== 0\n            &&\n            <div>\n              <h2>Done Todos</h2>\n              <List\n                todos={this.props.noUserDoneTodos}\n                onRemoveTodo={this.props.handleRemoveDoneTodo}\n                isSignedIn={false}\n                userEmail=''\n                color={'55e888'}\n              />\n            </div>\n          }\n        </div>\n      );\n    }\n  }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import {\n  ADD_TODO, REMOVE_TODO,\n  REMOVE_DONE_TODO,\n  REQUEST_TODOS_PENDING,\n  REQUEST_TODOS_SUCCESS,\n  REQUEST_TODOS_FAILED,\n  REQUEST_DONE_TODOS_PENDING,\n  REQUEST_DONE_TODOS_SUCCESS,\n  REQUEST_DONE_TODOS_FAILED,\n  WIPE_TODOS,\n  ADD_TODO_PENDING,\n  ADD_TODO_SUCCESS,\n  ADD_TODO_FAILED,\n  REMOVE_TODO_PENDING,\n  REMOVE_TODO_SUCCESS,\n  REMOVE_TODO_FAILED,\n  REMOVE_DONE_TODO_PENDING,\n  REMOVE_DONE_TODO_SUCCESS,\n  REMOVE_DONE_TODO_FAILED,\n  SIGN_IN_PENDING,\n  SIGN_IN_SUCCESS,\n  SIGN_IN_FAILED,\n  REGISTER_PENDING,\n  REGISTER_SUCCESS,\n  REGISTER_FAILED,\n  SIGN_OUT,\n  CHANGE_ACCOUNT_ROUTE\n} from './constants';\n\nconst initialState = {\n  todos: [],\n  doneTodos: []\n}\n\nexport const updateTodosWithoutUser = (state = initialState, action={}) => {\n  switch (action.type) {\n    case ADD_TODO:\n      return Object.assign({}, state, { todos: [...state.todos, action.payload] })\n    case REMOVE_TODO:\n      const array = [...state.todos];\n      let newDoneItem = null;\n      if (action.payload !== -1) {\n        newDoneItem = array.splice(action.payload, 1);\n      }\n      return {\n        todos: array,\n        doneTodos: [...state.doneTodos, ...newDoneItem]\n      }\n    case REMOVE_DONE_TODO:\n      const doneArray = [...state.doneTodos];\n      if (action.payload !== -1) {\n        doneArray.splice(action.payload, 1);\n      }\n      return {\n        todos: state.todos,\n        doneTodos: doneArray\n      }\n    default:\n      return state;\n  }\n}\n\nconst initialStateWithUser = {\n  isPending: false,\n  error: '',\n  todos: [],\n  doneTodos: []\n}\n\nexport const updateTodos = (state=initialStateWithUser, action={}) => {\n  switch (action.type) {\n    case REQUEST_TODOS_PENDING:\n      return Object.assign({}, state, { isPending: true });\n    case REQUEST_TODOS_SUCCESS:\n      return Object.assign({}, state, { todos: action.payload.todos, isPending: false });\n    case REQUEST_TODOS_FAILED:\n      return Object.assign({}, state, { error: action.payload, isPending: false });\n    case REQUEST_DONE_TODOS_PENDING:\n      return Object.assign({}, state, { isPending: true });\n    case REQUEST_DONE_TODOS_SUCCESS:\n      return Object.assign({}, state, { doneTodos: action.payload.todos, isPending: false });\n    case REQUEST_DONE_TODOS_FAILED:\n      return Object.assign({}, state, { error: action.payload, isPending: false });\n    case ADD_TODO_PENDING:\n      return Object.assign({}, state, { isPending: true });\n    case ADD_TODO_SUCCESS:\n      return Object.assign({}, state, { todos: [...state.todos, action.payload.todo], isPending: false });\n    case ADD_TODO_FAILED:\n      return Object.assign({}, state, { error: action.payload, isPending: false });\n    case REMOVE_TODO_PENDING:\n      return Object.assign({}, state, { isPending: true });\n    case REMOVE_TODO_SUCCESS:\n      return Object.assign({}, state, { isPending: false, doneTodos: [...state.doneTodos, action.payload.doneTodo], todos: action.payload.todos})\n    case REMOVE_TODO_FAILED:\n      return Object.assign({}, state, { error: action.payload, isPending: false });\n    case REMOVE_DONE_TODO_PENDING:\n      return Object.assign({}, state, { isPending: true });\n    case REMOVE_DONE_TODO_SUCCESS:\n      return Object.assign({}, state, { isPending: false, doneTodos: action.payload.doneTodos });\n    case REMOVE_DONE_TODO_FAILED:\n      return Object.assign({}, state, { error: action.payload, isPending: false });\n    case WIPE_TODOS:\n      return state=initialStateWithUser;\n    default:\n      return state;\n  }\n}\n\nconst initialStateAccount = {\n  isPending: false,\n  isSignedIn: false,\n  error: '',\n  email: ''\n}\n\nexport const account = (state=initialStateAccount, action={}) => {\n  switch (action.type) {\n    case SIGN_IN_PENDING:\n      return Object.assign({}, state, { isPending: true });\n    case SIGN_IN_SUCCESS:\n      return Object.assign({}, state, { isPending: false, isSignedIn: true, email: action.payload.email });\n    case SIGN_IN_FAILED:\n      return Object.assign({}, state, { isPending: false, error: action.payload });\n    case REGISTER_PENDING:\n      return Object.assign({}, state, { isPending: true });\n    case REGISTER_SUCCESS:\n      return Object.assign({}, state, { isPending: false, isSignedIn: true, email: action.payload.email });\n    case REGISTER_FAILED:\n      return Object.assign({}, state, { isPending: false, error: action.payload });\n    case SIGN_OUT:\n      return Object.assign({}, state, initialStateAccount);\n    default:\n      return state;\n  }\n}\n\n\nconst initialStateAccountRoute = {\n  route: ''\n}\n\nexport const accountRoute = (state=initialStateAccountRoute, action={}) => {\n  switch (action.type) {\n    case CHANGE_ACCOUNT_ROUTE:\n      return Object.assign({}, state, { route: action.payload })\n    default:\n      return state;\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { createStore, applyMiddleware, combineReducers } from 'redux';\nimport { createLogger } from 'redux-logger';\nimport thunkMiddleware from 'redux-thunk';\nimport './index.css';\nimport App from './Containers/App';\nimport * as serviceWorker from './serviceWorker';\nimport { updateTodosWithoutUser, updateTodos, account, accountRoute } from './reducers';\n\nconst logger = createLogger();\n\nconst rootReducer = combineReducers({ updateTodosWithoutUser, updateTodos, account, accountRoute });\nconst store = createStore(rootReducer, applyMiddleware(thunkMiddleware, logger));\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>\n  , document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}