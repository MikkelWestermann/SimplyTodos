{"version":3,"sources":["Components/ListItem.js","Components/List.js","Components/Form.js","Containers/App.js","actions.js","constants.js","serviceWorker.js","reducers.js","index.js"],"names":["ListItem","handleRemoveTodo","_this","props","onRemoveTodo","index","react_default","a","createElement","style","backgroundColor","concat","this","color","className","onClick","todo","Component","List","_ref","todos","map","item","i","src_Components_ListItem","key","Form","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","handleAddTodo","event","onAddTodo","target","value","handleSubmit","preventDefault","setState","inputVal","onInputChange","isGreen","state","onSubmit","autoComplete","type","placeholder","id","onChange","App","isAllDone","length","doneTodos","src_Components_Form","Components_List","handleRemoveDoneTodo","connect","dispatch","payload","removeTodo","removeDoneTodo","Boolean","window","location","hostname","match","initialState","logger","createLogger","store","createStore","arguments","undefined","action","toConsumableArray","array","newDoneItem","splice","doneArray","applyMiddleware","ReactDOM","render","es","src_Containers_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.d0ddd9cf.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './ListItem.css';\n\nclass ListItem extends Component {\n  handleRemoveTodo = () => {\n    this.props.onRemoveTodo(this.props.index);\n  }\n  render() {\n    return (\n      <div>\n        <h3 style={{backgroundColor: `#${this.props.color}`}} className='listItem' onClick={this.handleRemoveTodo}>{this.props.todo}</h3>\n      </div>\n    );\n  }\n}\n\nexport default ListItem;\n","import React from 'react';\nimport ListItem from './ListItem';\n\nconst List = ({ todos, onRemoveTodo, color }) => {\n  return (\n    <div>\n      {\n        todos.map((item, i) => {\n          return (\n              <ListItem\n              todo={item}\n              key={i}\n              index={i}\n              onRemoveTodo={onRemoveTodo}\n              color={color}\n            />\n          )\n        })\n      }\n    </div>\n  );\n}\n\nexport default List;\n","import React, { Component } from 'react';\nimport './Form.css';\n\nclass Form extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      inputVal: ''\n    }\n  }\n  handleAddTodo = (event) => {\n    this.props.onAddTodo(event.target[0].value);\n  }\n  handleSubmit = (event) => {\n    event.preventDefault();\n    this.handleAddTodo(event);\n    this.setState({\n      inputVal: ''\n    })\n  }\n  onInputChange = (event) => {\n    this.setState({\n      inputVal: event.target.value\n    })\n  }\n  isGreen = () => {\n    return this.props.isGreen ? 'isGreen' : 'isBlue';\n  }\n  render() {\n    return (\n      <form onSubmit={this.handleSubmit} autoComplete='off' >\n        <input type='text' placeholder='Add Todo' id='textField' value={this.state.inputVal} onChange={this.onInputChange} style={{color: `#${this.props.color}`}} />\n        <button type='submit' id={this.isGreen()}>Add</button>\n      </form>\n    );\n  }\n}\n\nexport default Form;\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport './App.css';\nimport List from '../Components/List';\nimport Form from '../Components/Form';\n\nimport { setTodos, removeTodo, removeDoneTodo } from '../actions';\n\nconst mapStateToProps = state => {\n  return {\n    todos: state.todos,\n    doneTodos: state.doneTodos\n  }\n}\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    handleAddTodo: todo => {\n      if(todo.length === 0) {\n        return;\n      }\n      dispatch(setTodos([todo]));\n    },\n    handleRemoveTodo: index => {\n      dispatch(removeTodo(index))\n    },\n    handleRemoveDoneTodo: index => {\n      dispatch(removeDoneTodo(index))\n    }\n  }\n}\n\nclass App extends Component {\n  isAllDone = () => {\n    return this.props.todos.length === 0 && this.props.doneTodos.length > 0 ? true : false;\n  }\n  color = () => {\n    return this.isAllDone() ? '55e888' : '38b3be'\n  }\n  render() {\n    return(\n      <div style={{color:`#${this.color()}`}} className='App' >\n        <h1>Simply Todos</h1>\n        <Form\n          onAddTodo={this.props.handleAddTodo}\n          color={this.color()}\n          isGreen={this.isAllDone()}\n        />\n        <List\n          todos={this.props.todos}\n          onRemoveTodo={this.props.handleRemoveTodo}\n          color={'38b3be'}\n        />\n        {\n          this.props.doneTodos.length !== 0\n          &&\n          <div>\n            <h2>Done Todos</h2>\n            <List\n              todos={this.props.doneTodos}\n              onRemoveTodo={this.props.handleRemoveDoneTodo}\n              color={'55e888'}\n            />\n          </div>\n        }\n      </div>\n    );\n  }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n","import { ADD_TODO, REMOVE_TODO, REMOVE_DONE_TODO } from './constants';\n\nexport const setTodos = (text) => ({\n  type: ADD_TODO,\n  payload: text\n})\n\nexport const removeTodo = (index) => ({\n  type: REMOVE_TODO,\n  payload: index\n})\n\nexport const removeDoneTodo = (index) => ({\n  type: REMOVE_DONE_TODO,\n  payload: index\n})\n","export const ADD_TODO = 'ADD_TODO';\nexport const REMOVE_TODO = 'REMOVE_TODO';\nexport const REMOVE_DONE_TODO = 'REMOVE_DONE_TODO'; \n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { ADD_TODO, REMOVE_TODO, REMOVE_DONE_TODO } from './constants';\n\nconst initialState = {\n  todos: [],\n  doneTodos: []\n}\n\nexport const changeTodos = (state = initialState, action={}) => {\n  switch (action.type) {\n    case ADD_TODO:\n      return {\n        todos: [...state.todos, action.payload],\n        doneTodos: state.doneTodos\n      }\n    case REMOVE_TODO:\n      const array = [...state.todos];\n      let newDoneItem = null;\n      if (action.payload !== -1) {\n        newDoneItem = array.splice(action.payload, 1);\n      }\n      return {\n        todos: array,\n        doneTodos: [...state.doneTodos, ...newDoneItem]\n      }\n    case REMOVE_DONE_TODO:\n      const doneArray = [...state.doneTodos];\n      if (action.payload !== -1) {\n        doneArray.splice(action.payload, 1);\n      }\n      return {\n        todos: state.todos,\n        doneTodos: doneArray\n      }\n    default:\n      return state;\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { createStore, applyMiddleware } from 'redux';\nimport { createLogger } from 'redux-logger';\nimport './index.css';\nimport App from './Containers/App';\nimport * as serviceWorker from './serviceWorker';\nimport { changeTodos } from './reducers';\n\nconst logger = createLogger(); \n\nconst store = createStore(changeTodos, applyMiddleware(logger));\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>\n  , document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}