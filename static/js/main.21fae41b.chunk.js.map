{"version":3,"sources":["Components/ListItem.js","Components/List.js","Components/Form.js","Containers/App.js","actions.js","constants.js","serviceWorker.js","reducers.js","index.js"],"names":["divStyle","color","backgroundColor","width","height","display","justifyContent","alignItems","fontSize","ListItem","handleRemoveTodo","_this","props","onRemoveTodo","index","react_default","a","createElement","style","onClick","this","todo","Component","List","_ref","todos","map","item","i","Components_ListItem","key","Form","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","handleAddTodo","event","onAddTodo","target","value","handleSubmit","preventDefault","setState","inputVal","onInputChange","state","onSubmit","autoComplete","type","placeholder","id","onChange","App","className","src_Components_Form","Components_List","connect","dispatch","length","payload","removeTodo","Boolean","window","location","hostname","match","initialState","logger","createLogger","store","createStore","arguments","undefined","action","toConsumableArray","concat","array","splice","applyMiddleware","ReactDOM","render","es","src_Containers_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.21fae41b.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\nconst divStyle = {\n  color: '#1f1f1f',\n  backgroundColor: '#38b3be',\n  width: '100vw',\n  height: '150px',\n  display: 'flex',\n  justifyContent: 'center',\n  alignItems: 'center',\n  fontSize: '2.5em'\n};\n\nclass ListItem extends Component {\n  handleRemoveTodo = () => {\n    this.props.onRemoveTodo(this.props.index);\n  }\n  render() {\n    return (\n      <div>\n        <h3 style={divStyle} onClick={this.handleRemoveTodo}>{this.props.todo}</h3>\n      </div>\n    );\n  }\n}\n\nexport default ListItem;\n","import React from 'react';\nimport ListItem from './ListItem';\n\nconst List = ({ todos, onRemoveTodo }) => {\n  return (\n    <div>\n      {\n        todos.map((item, i) => {\n          return (\n              <ListItem\n              todo={item}\n              key={i}\n              index={i}\n              onRemoveTodo={onRemoveTodo}\n            />\n          )\n        })\n      }\n    </div>\n  );\n}\n\nexport default List;\n","import React, { Component } from 'react';\nimport './Form.css';\n\nclass Form extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      inputVal: ''\n    }\n  }\n  handleAddTodo = (event) => {\n    this.props.onAddTodo(event.target[0].value);\n  }\n  handleSubmit = (event) => {\n    event.preventDefault();\n    this.handleAddTodo(event);\n    this.setState({\n      inputVal: ''\n    })\n  }\n  onInputChange = (event) => {\n    this.setState({\n      inputVal: event.target.value\n    })\n  }\n  render() {\n    return (\n      <form onSubmit={this.handleSubmit} autoComplete='off'>\n        <input type='text' placeholder='Add Todo' id='textField'  value={this.state.inputVal} onChange={this.onInputChange}/>\n        <button type='submit' id='button'>Add</button>\n      </form>\n    );\n  }\n}\n\nexport default Form;\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport './App.css';\nimport List from '../Components/List';\nimport Form from '../Components/Form';\n\nimport { setTodos, removeTodo } from '../actions';\n\nconst mapStateToProps = state => {\n  return {\n    todos: state.todos\n  }\n}\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    handleAddTodo: todo => {\n      if(todo.length === 0) {\n        return;\n      }\n      dispatch(setTodos([todo]));\n    },\n    handleRemoveTodo: index => {\n      dispatch(removeTodo(index))\n    }\n  }\n}\n\nclass App extends Component {\n  render() {\n    return(\n      <div className='App'>\n        <h1>Simply Todos</h1>\n        <Form\n          onAddTodo={this.props.handleAddTodo}\n        />\n        <List\n          todos={this.props.todos}\n          onRemoveTodo={this.props.handleRemoveTodo}\n        />\n      </div>\n    );\n  }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n","import { ADD_TODO, REMOVE_TODO } from './constants';\n\nexport const setTodos = (text) => ({\n  type: ADD_TODO,\n  payload: text\n})\n\nexport const removeTodo = (index) => ({\n  type: REMOVE_TODO,\n  payload: index\n})\n","export const ADD_TODO = 'ADD_TODO';\nexport const REMOVE_TODO = 'REMOVE_TODO'; \n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { ADD_TODO, REMOVE_TODO } from './constants';\n\nconst initialState = {\n  todos: []\n}\n\nexport const changeTodos = (state = initialState, action={}) => {\n  switch (action.type) {\n    case ADD_TODO:\n      return {\n        todos: [...state.todos, action.payload]\n      }\n    case REMOVE_TODO:\n      const array = [...state.todos];\n      if (action.payload !== -1) {\n        array.splice(action.payload, 1);\n      }\n      return { todos: array }\n    default:\n      return state;\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { createStore, applyMiddleware } from 'redux';\nimport { createLogger } from 'redux-logger';\nimport './index.css';\nimport App from './Containers/App';\nimport * as serviceWorker from './serviceWorker';\nimport { changeTodos } from './reducers';\n\nconst logger = createLogger(); \n\nconst store = createStore(changeTodos, applyMiddleware(logger));\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>\n  , document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}